[
    {
        "name": "Abstract Factory",
        "definition": "Provide an interface for creating families of related or dependent objects without specifying their concrete classes."
    },
    {
        "name": "Builder",
        "definition": "Separate the construction of a complex object from its representation so that the same construction process can create different representations."
    },
    {
    	"name": "Factory Method",
    	"definition": "Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses."
    },
    {
    	"name": "Prototype",
    	"definition": "Specify the kind of objects to create using a prototypical instance, and create new objects by copying this prototype."
    },
    {
    	"name": "Singleton",
    	"definition": "Ensure a class has only one instance and provide a global point of access to it."
    },
    {
    	"name": "Adapter",
    	"definition": "Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces."
    },
    {
    	"name": "Bridge",
    	"definition": "Decouple an abstraction from its implementation so that the two can vary independently."
    },
    {
    	"name": "Composite",
    	"definition": "Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly."
    },
    {
    	"name": "Decorator",
    	"definition": "Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality."
    },
    {
    	"name": "Facade",
    	"definition": "Provide a unified interface to a set of interfaces in a subsystem. Fa√ßade defines a higher-level interface that makes the subsystem easier to use."
    },
    {
    	"name": "Flyweight",
    	"definition": "Use sharing to support large numbers of fine-grained objects efficiently."
    },
    {
    	"name": "Proxy",
    	"definition": "Provide a surrogate or placeholder for another object to control access to it."
    },
    {
    	"name": "Chain of Responsibility",
    	"definition": "Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it."
    },
    {
    	"name": "Command",
    	"definition": "Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations."
    },
    {
    	"name": "Interpreter",
    	"definition": "Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language."
    },
    {
    	"name": "Iterator",
    	"definition": "Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation."
    },
    {
    	"name": "Mediator",
    	"definition": "Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently."
    },
    {
    	"name": "Memento",
    	"definition": "Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later."
    },
    {
    	"name": "Observer",
    	"definition": "Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."
    },
    {
    	"name": "State",
    	"definition": "Allow an object to alter its behavior when its internal state changes. The object will appear to change its class."
    },
    {
    	"name": "Strategy",
    	"definition": "Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it."
    },
    {
    	"name": "Template Method",
    	"definition": "Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure."
    },
    {
    	"name": "Visitor",
    	"definition": "Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates."
    }
]